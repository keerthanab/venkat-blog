{
  "name": "passport-singly",
  "version": "0.1.1",
  "description": "Singly authentication strategy for Passport.",
  "author": {
    "name": "Beau Gunderson",
    "email": "nerds@singly.com",
    "url": "https://singly.com/"
  },
  "contributors": [
    {
      "name": "Johnny Halife",
      "email": "johnny@mural.ly",
      "url": "https://murally.com/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Singly/passport-singly.git"
  },
  "bugs": {
    "url": "http://github.com/Singly/passport-singly/issues"
  },
  "main": "./lib/passport-singly",
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "~0.1.12"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "NODE_PATH=lib node_modules/.bin/vows test/*-test.js"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "passport",
    "singly",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "readme": "# Passport-Singly\n\n[Passport](http://passportjs.org/) strategy for authenticating with\n[Singly](http://www.singly.com/) using the OAuth 2.0 API.\n\nThis module lets you authenticate using Singly in your Node.js applications.\nBy plugging into Passport, Singly authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Installation\n\n    $ npm install passport-singly\n\n## Usage\n\n#### Configure Strategy\n\nThe Singly authentication strategy authenticates users using a Singly\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a app ID, app secret, and callback URL.\n\n    passport.use(new SinglyStrategy({\n        clientID: SINGLY_APP_ID,\n        clientSecret: SINGLY_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/singly/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ singlyId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'singly'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication (not that the ordering of these two routes is important):\n\n    app.get('/auth/singly/callback', passport.authenticate('singly', {\n      failureRedirect: '/login',\n      successReturnToOrRedirect: '/'\n    }));\n\n    app.get('/auth/singly/:service', passport.authenticate('singly'));\n\n#### Extended Permissions\n\nIf you need extended permissions from the user, the permissions can be requested\nvia the `scope` option to `passport.authenticate()`.\n\nFor example, this authorization specifies Facebook as the service and requests\npermission to the user's statuses and checkins:\n\n    app.get('/auth/singly', passport.authenticate('singly', {\n      service: 'facebook',\n      scope: ['user_status', 'user_checkins']\n    }));\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/Singly/passport-singly/tree/master/examples/login).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/Singly/passport-singly.png)](http://travis-ci.org/Singly/passport-singly)\n",
  "_id": "passport-singly@0.1.1",
  "_from": "passport-singly@*"
}
